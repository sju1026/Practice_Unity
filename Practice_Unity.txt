유니티 이벤트 함수

Initialize - 초기화 함수 : Awake() -> OnEnable() -> Start()
Awake()
- 현재 씬에서 게임오브젝트가 활성화 되어 있을 때 1회 호출
(컴포넌트가 빌황성화 상태여도 게임오브젝트가 활성화 되어 있으면 호출)

Start()
- 현재 씬에서 게임오브젝트와 컴포넌트가 모두 활성화 되어 있을 때 1회 호출
- 데이터를 초기화 하는 용도로 사용
- 첫 번째 업데이트 함수가 실행되기 직전에 호출

OnEnable()
- 컴포넌트가 비활성화 되었다가 활성화 될 때 마다 1회 호출

업데이트 함수 : Update() -> LateUpdate()
Update()
- 현재 씬이 실행된 후 컴포넌트가 활성화되어 있을 때 매 프레임마다 호출
(FPS 60이라 하면 Update() 함수가 1초에 60번 호출)

LateUpdate()
- 현재 씬에 존재하는 모든 게임오브젝트의 Update()함수가 1회 실행된 후 실행
Tip
> 플레이어 캐릭터, 카메라와 같이 서로 다른 오브젝트가 존재할 때 -> 플레이어 캐릭터를 쫒아다니는 카메라를 구현한다면?
-> 플레이어 캐릭터가 Update()를 이용해 움직이고 난 후 카메라는 LateUpdate()에서 플레이어의 위치를 바탕으로 이동

FixedUpdate()
- 프레임의 영향을 받지 않고 일정한 간격으로 호출
- Edit - Project Settings - Time 옵션의 Fixed Timestep 변수로 조절 가능
(기본 값 0.02로 0.02초에 1번 호출된다는 뜻, 1초에 50번)

오브젝트 파괴
OnDestroy()
- 게임 오브젝트가 파괴될 때 1회 호출
- 씬이 변경되거나 게임이 종료될 때도 오브젝트가 파괴되기 때문에 호출

게임 종료
OnApplicationQuit()
- 게임이 종료될 때 1회 호출
- 유니티 에디터에서는 플레이 모드를 중지할 때 호출

OnDisable()
- 컴포넌트가 활성화 되었다가 비활성화 될 때마다 1회 호출 (OnEnable과 반대)

========================================================================================

Character Controller
- 3차원 게임에서 사람 형태의 캐릭터 움직임과 관련된 제어를 위해 사용
- 캡슐 형태의 충돌 범위가 포함
> Slope Limit : 올라갈 수 있는 경사 한계 각
> Step Offset : 설정 값보다 낮은 높이의 계단을 오를 수 있다
> Center : Capsule 충돌 범위의 중심점
> Radius : Capsule 충돌 범위의 반지름 (x, y)
> Height : Capsule 충돌 범위의 높이(z)

* 중력적용 x

========================================================================================

Navigation Mesh 기초
NavMeshAgent
- 네비게이션 메시 정보를 바탕으로 이동하는 오브젝트

OffMeshLink
- 연결이 끊어져 있는 절벽, 낭떠러지, 사다리 등을 이동 가능하게 설정
- 자동
> 장점 
-> 게임월드에 배치된 많은 모브젝트의 Off Mesh Link를 한꺼번에 설정 가능
> 단점
-> 낙하 높이와 점프 거리를 하나만 설정할 수 있기 때문에 다양한 지ㅕㅎㅇ을 세세하게 설정하는 것이 불가능 (Off Mesh Link 데이터 소실의 위험)
-> 위로 올라가는 Off Mesh Link 설정 불가능
- 수동
> 장점
-> 지형에 따라 세세한 설정이 가능
-> 사다리 / 암벽과 같이 위로 올라가는 Off Mesh Link 설정 가능
> 단점
-> Off Mesh Link로 연결이 필요한 모든 부분을 직접 설정해야 함

NavMeshObstacle
- 이동하는 장애물의 네비게이션 메시 정보를 실시간으로 설정 / 이동 오브젝트의 네비게이션 메시 설정에 사용되는 컴포넌트
> Shape : 장애물의 모양 (Box or Capsule)
> Center : Shape의 중심 위치
> Carve : Navigation Mesh에 공간을 비울지(true : 비움)
> Move Threshold : 설저오딘 거리를 이동하면 오브젝트의 Navigation Mesh 데이터 갱신
> Time To Stationary : 설정된 시간 만큼 움직임이 없으면 "멈춰 있다"라고 인식
> Carve Only Stationary : 멈춰있을 때만 공간을 비울지 (true : 멈춰있을 때만 공간을 비움, false : 실시간으로 비움)
- Shape가 Box일 때 : Size : Box의 크기
- Shape가 Capsule일 때 
> Radius : Capsule의 반지름 / Height : Capsule의 높이

Navigation
Agent Type
- 에이전트 속성

Agent 정보
- Name : Agent Type에 보여지는 이름
- Radius : 에이전트의 반지름
- Height : 에이전트의 높이(키)
- Step Height : 오르내릴 수 있는 계단의 높이
- Max Slope : 올라갈 수 있는 경사 각도

Areas 
- Name : 구역 이름으로 기본 Walkable, Not WalkAble, Jump가 제공되고 User3부터 원하는 구역을 추가로 설정할 수 있다
- Cost : 구역과 함께 등록. 이동하는데 소요되는 비용(1 이상), 경로를 탐색할 때 Cost 정보를 기준으로 최단거리를 찾게 된다
> Cost가 2인 Jump는 Cost가 1인 Walkable을 지나갈 때 보다 2배의 시간이 걸린다는 뜻으로 사용
(실제 오브젝트의 물리적인 이동 속도가 느려지는 것이 아닌 경로를 계산할 때 활용된다.)

Bake
Baked Agent Size
- Agent Radius : 에이전트가 지나갈 수 있는 반지름
- Agent Height : 에이전트가 아래로 지나갈 수 있는 높이
- Max Slope : 에이전트가 올라갈 수 있는 경사 각도
- Step Height : 에이전트가 오르내릴 수 있는 계단의 높이

Generated Off Mesh Links
- 오프메시 링크는 올라가기 힘든 언덕, 사다리, 절벽 등을 연결해서 이동가능하게 만드는 옵션이다
> Drop Height : 이동할 수 있는 절벽 아래의 높이
> Jump Distance : 뛰어서 넘을 수 있는 절벽 거리
- "Bake" 버튼 :  Navigation에 설정된 옵션들을 바탕으로 네비게이션 정보를 데이터로 굽는다

Object
- Scene Filter : 현재 씬에서 원하는 오브젝트만 선택해서 볼 수 있다
(Mesh Renderer 컴포넌트, Terrain 컴포넌트 선택 가능)
- 선택된 오브젝트
> Navigation Static : 네비게이션 메시로 사용할 지 설정
> Generate OffMeshLinks : 자동으로 Off Mesh를 생성할 지 설정
> Navigation Area : 해당 오브젝트의 구역 설정
(설정되는 구역에 따라 해당 오브젝트의 Cost가 설정된다)

========================================================================================

Physics.Raycast()를 이용한 오브젝트 선택
- 우리가 보고있는 화면은 2차원 모니터. 게임 세상은 3차원 -> 2차원을 통해 3차원의 오브젝트를 제어

구현 원리
1. 카메라로부터 플레이어가 클릭한 마우스 위치를 관통하는 광선을 생성해서 발사한다
2. 현재 카메라에 보이는 화면을 관통해 뻗어나가는 광선은 우리가 지정한 길이에 도달하거나 오브젝트에 부딪히면 멈춘다
3. 오브젝트에 부딪혀 멈추게 되면 부딪힌 오브젝트의 정보를 반환한다
(광선에 부딪혔다 = 마우스로 선택한 오브젝트이다.)





























